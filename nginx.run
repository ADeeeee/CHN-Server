#!/bin/bash
set -x

source /etc/default/chnserver

set -o errexit
set -o nounset

trap "exit 130" SIGINT
trap "exit 137" SIGKILL
trap "exit 143" SIGTERM

PIDFILE=/var/run/nginx.pid
SERVER_BASE_URL=${SERVER_BASE_URL:-http://$(curl http://httpbin.org/ip | jq -r .origin)}
SERVER=$(echo ${SERVER_BASE_URL} | awk -F/ '{print $3}')

# Should we be doing this this way?
# What should we do to cleanup in a container?
if [[ -f $PIDFILE ]]
then
  rm $PIDFILE
fi

# In case the log dir is not there
mkdir -p /var/log/nginx
touch /var/log/nginx/error.log

# Check whether we can generate a certbot cert
USE_CERTBOT=1
protocol=$(echo ${SERVER_BASE_URL} | awk -F: '{print $1}')
if [[ $protocol == "http" ]] || [[ $SERVER == "localhost" ]] || [[ $SERVER =~ ([0-9]{1,3}\.){3}[0-9]{1,3} ]]
then
    USE_CERTBOT=0
fi

# Test if we should generate a self-signed cert
if [ -d "/etc/pki/tls/certs" ] && [ -d "/etc/pki/tls/private" ] && [ -z "$(ls -A /etc/pki/tls/certs)" ]
then
  # directories exist and certs is empty, let's put in a cert
  # We'll use a self-signed to start, and let LetsEncrypt replace
  openssl req -x509 -newkey rsa:4096 -keyout /etc/pki/tls/private/key.pem -out /etc/pki/tls/certs/cert.pem -nodes -days 1 -subj "/CN=${SERVER}"
  if [ $USE_CERTBOT -ne 0 ]
  then
    /usr/sbin/nginx &
    sleep 2
    ## Note, -ie means inplace, suffix with 'e', '-i -e' means in-place, with no suffix, then run expression
    sed -i -e "s/#server_name/server_name ${SERVER};/" /etc/nginx/sites-available/default
    certbot --nginx -n --register-unsafely-without-email --keep-until-expiring --agree-tos --domains ${SERVER}
    sleep 1
    pkill nginx
  fi
fi

/usr/sbin/nginx -t
exec /usr/sbin/nginx
